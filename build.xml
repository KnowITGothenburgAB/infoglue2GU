<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="infoglue" default="clean-deploy" basedir=".">

	<property file="build.properties"/>
	<property name="project.fullname" value="InfoGlue content management system"/>

	<property name="src" value="src"/>
	<property name="src.java" value="${src}/java"/>
	<property name="lib" value="lib"/>
	<property name="conf" value="conf"/>

	<property name="webapp" value="${src}/webapp"/>

	<property name="build" value="build"/>
	<property name="build.classes" value="${build}/classes"/>
	<property name="javadoc" value="${build}/javadoc"/>
	<property name="war.file.prefix" value="${build}/${ant.project.name}"/>
	<property name="cms.war.file" value="${war.file.prefix}-cms.war"/>
	<property name="deliver.war.file" value="${war.file.prefix}-deliver.war"/>

	<property name="test" value="test"/>
	<property name="test.java" value="${test}/java"/>
	<property name="test.classes" value="${build}/test-classes"/>

	<property name="year" value="2003"/>

	<!--
	* The master filterset, created from build.properties
	-->
	<filterset id="project.filters">
		<filtersfile file="build.properties"/>
	</filterset>

	<!--
	* lib filesets
	-->
	<fileset id="build.libs" dir="${lib}/build">
		<include name="**/*.jar"/>
	</fileset>

	<fileset id="core.libs" dir="${lib}/core">
		<include name="**/*.jar"/>
	</fileset>

	<fileset id="jdbc.libs" dir="${lib}/jdbc">
		<include name="*.jar"/>
	</fileset>

	<!--
	* fileset for deliver.properties
	-->
	<fileset id="deliver.properties" dir="${conf}" includes="deliver.properties"/>

	<!--
	* fileset for the deliver version of mapping.xml.
	-->
	<fileset id="deliver.mapping" dir="${conf}/deliver" includes="mapping.xml"/>

	<!--
	* paths
	-->
	<path id="build.classpath">
		<pathelement location="${build.classes}"/>
		<fileset refid="build.libs"/>
	</path>

	<path id="test.classpath">
		<pathelement location="${test.classes}"/>
		<path refid="build.classpath"/>
		<fileset refid="core.libs"/>
		<fileset refid="jdbc.libs"/>
	</path>

	<path id="build.sourcepath">
		<pathelement location="${src.java}/"/>
	</path>

	<path id="test.sourcepath">
		<pathelement location="${test.java}"/>
	</path>

	<!--
	* Initializes the build
	-->
	<target name="init">
		<tstamp/>
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${test.classes}"/>
	</target>

	<!--
	* Removes the output directory
	-->
	<target name="clean">
		<delete dir="${build}" quiet="true"/>
	</target>

	<!--
	* Compiles Java source files and copies resources to the build output directory
	* that need to be on the classpath.  Also copies the Velocity templates required by
	* the Preview app to the classpath; these are loaded by Java classes that are hard-coded
	* to expect them here.
	*
	* I have enabled depend for jikes.  This means that files that are dependencies of a file
	* whose target is out of date will be recompiled, thus sparing you the headache of a
	* NoSuchMethodError or similar run time "surprise" as a result of the dependencies not being recompiled.
	* I strongly encourage everyone to use jikes to compile. It is far superior to the "modern"
	* compiler ant uses by default, not only because it does dependency checking, but it also
	* warns you about various bad coding practices that the modern compiler allows, e.g., '$'
	* in identifiers.  It is also more strict about checking that all classes referenced by a
	* file are in the classpath somewhere.
	*
	* Note that the modern compiler does not support the depend option, and it will issue a
	* warning to this effect.  Check out the documentation for the javac task in the Ant manual
	* for more info.
	-->
	<target name="compile" depends="init">
		<javac destdir="${build.classes}" classpathref="build.classpath" debug="true" depend="true">
			<src refid="build.sourcepath"/>
		</javac>
		<javac destdir="${test.classes}" classpathref="build.classpath" debug="true" depend="true">
			<src refid="test.sourcepath"/>
		</javac>
		<copy todir="${build.classes}">
			<fileset dir="${conf}">
				<include name="*.properties"/>
				<include name="*.xml"/>
				<include name="*.dtd"/>
				<include name="LICENSE.HTML"/>
				<exclude name="*web.xml"/>
			</fileset>
			<filterset refid="project.filters"/>
			<filterset>
				<filter token="context.root.deliver" value="${context.root.working}"/>
				<filter token="operatingMode.deliver" value="${operatingMode.working}"/>
			</filterset>
		</copy>
		<copy todir="${build.classes}">
			<fileset dir="${conf}/cms" includes="mapping.xml"/>
		</copy>
		<copy todir="${build.classes}">
			<fileset dir="${src}" includes="workflows/*.xml"/>
		</copy>
		<copy todir="${build.classes}">
			<fileset dir="${src.java}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<copy todir="${build.classes}">
			<fileset dir="${webapp}" includes="preview/*.vm"/>
		</copy>

		<!-- Copy all supporting test files-->
		<copy filtering="no" todir="${test.classes}">
			<fileset dir="${test.java}">
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
			</fileset>
		</copy>
	</target>

	<!--
	* Creates jar files containing InfoGlue classes and test classes. These can be
	* imported into another codebase for custom development.
	-->
	<target name="jar" depends="compile" description="Creates a jar file">
		<jar file="${build}/${ant.project.name}-${project.version}.jar">
			<fileset dir="${build.classes}"/>
		</jar>
		<jar file="${build}/${ant.project.name}-${project.version}-test.jar">
			<fileset dir="${test.classes}"/>
		</jar>
	</target>

	<!--
	* Creates the CMS war file.  Since we deploy an exploded war, the primary
	* purpose of this target is to organize the files required to deploy.
	-->
	<target name="war-cms" depends="compile" description="Creates the CMS war file">
		<war warfile="${cms.war.file}" webxml="${conf}/cms-web.xml">
			<fileset dir="${webapp}"/>
			<classes dir="${build.classes}"/>
			<lib refid="build.libs"/>
			<lib refid="core.libs"/>
			<lib refid="jdbc.libs"/>
		</war>
	</target>

	<!--
	* Creates the deliver war file.  Since we deploy an exploded war, the primary
	* purpose of this target is to organize the files required to deploy.
	-->
	<target name="war-deliver" depends="compile" description="Creates the deliver war file">
		<war warfile="${deliver.war.file}" webxml="${conf}/deliver-web.xml">
			<fileset dir="${webapp}"/>
			<classes dir="${build.classes}"/>
			<lib refid="build.libs"/>
			<lib refid="core.libs"/>
			<lib refid="jdbc.libs"/>
		</war>
	</target>

	<!--
	* Deploys the cms app by unpacking the war file created by the war target into
	* the CMS deploy directory.
	-->
	<target name="deploy-cms" depends="war-cms" description="Unpacks war to deploy dir">
		<unwar src="${cms.war.file}" dest="${deploy.dir.cms}"/>
	</target>

	<!--
	* Deploys the deliver working app by unpacking the war file created by the war target into
	* the working deploy directory.  By default, the compile target copies deliver.properties
	* into build/classes using the settings for the working app.  Replaces the mapping.xml from
	* the war with the deliver version.
	-->
	<target name="deploy-working" depends="war-deliver" description="Unpacks war to working dir">
		<unwar src="${deliver.war.file}" dest="${deploy.dir.working}"/>
		<copy todir="${deploy.dir.working}/WEB-INF/classes" overwrite="true">
			<fileset refid="deliver.mapping"/>
		</copy>
	</target>

	<!--
	* Deploys the preview app, replacing deliver.properties with one that
	* has context.root.deliver and operatingMode.deliver set appropriately.
	* Replaces the mapping.xml from the war with the deliver version.
	-->
	<target name="deploy-preview" depends="war-deliver" description="Unpacks war to preview dir">
		<unwar src="${deliver.war.file}" dest="${deploy.dir.preview}"/>
		<copy todir="${deploy.dir.preview}/WEB-INF/classes" overwrite="true">
			<fileset refid="deliver.properties"/>
			<fileset refid="deliver.mapping"/>
			<filterset refid="project.filters"/>
			<filterset>
				<filter token="context.root.deliver" value="${context.root.preview}"/>
				<filter token="operatingMode.deliver" value="${operatingMode.preview}"/>
			</filterset>
		</copy>
	</target>

	<!--
	* Deploys the deliver live app, replacing deliver.properties with one that
	* has context.root.deliver and operatingMode.deliver set appropriately.
	* Replaces the mapping.xml from the war with the deliver version.
	-->
	<target name="deploy-live" depends="war-deliver" description="Unpacks war to live dir">
		<unwar src="${deliver.war.file}" dest="${deploy.dir.live}"/>
		<copy todir="${deploy.dir.live}/WEB-INF/classes" overwrite="true">
			<fileset refid="deliver.properties"/>
			<fileset refid="deliver.mapping"/>
			<filterset refid="project.filters"/>
			<filterset>
				<filter token="context.root.deliver" value="${context.root.live}"/>
				<filter token="operatingMode.deliver" value="${operatingMode.live}"/>
			</filterset>
		</copy>
	</target>

	
	<!--
	* Deploys the deliver live app, replacing deliver.properties with one that
	* has context.root.deliver and operatingMode.deliver set appropriately.
	* Replaces the mapping.xml from the war with the deliver version.
	-->
	<target name="fast-build" depends="" description="Compiles the classes if class and moves configs to the right spot">
		<echo message="Copying infoglueCMS/WEB-INF/classes"/>
		<copy todir="${build}/cmswebapp/WEB-INF/classes">
			<fileset dir="${build.classes}">
				<include name="**/*.*"/>
				<exclude name="cms-web.xml"/>
				<exclude name="deliver-web.xml"/>
			</fileset>
		</copy>
		
		<echo message="Copying infoglueDeliver/WEB-INF/classes"/>
		<copy todir="${build}/deliverwebapp/WEB-INF/classes">
			<fileset dir="${build.classes}">
				<include name="**/*.*"/>
				<exclude name="cms-web.xml"/>
				<exclude name="deliver-web.xml"/>
			</fileset> 
		</copy>

		<echo message="Copying infoglueDeliver"/>
		<copy todir="${build}/deliverwebapp">
			<fileset dir="${webapp}">
				<include name="**/*.*"/>
			</fileset> 
		</copy>

		<echo message="Copying infoglueCMS"/>
		<copy todir="${build}/cmswebapp">
			<fileset dir="${webapp}">
				<include name="**/*.*"/>
			</fileset> 
		</copy>

		<echo message="Copying confs to deliver"/>
		<copy todir="${build}/deliverwebapp/WEB-INF/classes">
			<fileset dir="${conf}">
				<include name="*.properties"/>
				<include name="*.xml"/>
				<include name="*.dtd"/>
				<include name="LICENSE.HTML"/>
				<exclude name="*web.xml"/>
			</fileset>
			<filterset refid="project.filters"/>
			<filterset>
				<filter token="context.root.deliver" value="${context.root.working}"/>
				<filter token="operatingMode.deliver" value="${operatingMode.working}"/>
			</filterset>
		</copy>
		<copy todir="${build}/deliverwebapp/WEB-INF/classes">
			<fileset dir="${conf}/deliver" includes="mapping.xml"/>
			<fileset dir="${conf}/deliver" includes="webwork.properties"/>
		</copy>
		<copy file="${conf}/deliver-web.xml" tofile="${build}/deliverwebapp/WEB-INF/web.xml"/>
		<copy todir="${build}/deliverwebapp/WEB-INF/classes">
			<fileset dir="${src}" includes="workflows/*.xml"/>
		</copy>

		<echo message="Copying confs to cms"/>
		<copy todir="${build}/cmswebapp/WEB-INF/classes">
			<fileset dir="${conf}">
				<include name="*.properties"/>
				<include name="*.xml"/>
				<include name="*.dtd"/>
				<include name="LICENSE.HTML"/>
				<exclude name="*web.xml"/>
			</fileset>
			<filterset refid="project.filters"/>
			<filterset>
				<filter token="context.root.deliver" value="${context.root.working}"/>
				<filter token="operatingMode.deliver" value="${operatingMode.working}"/>
			</filterset>
		</copy>
		<copy todir="${build}/cmswebapp/WEB-INF/classes">
			<fileset dir="${conf}/cms" includes="mapping.xml"/>
			<fileset dir="${conf}/cms" includes="webwork.properties"/>
		</copy>
		<copy file="${conf}/cms-web.xml" tofile="${build}/cmswebapp/WEB-INF/web.xml"/>
		<copy todir="${build}/cmswebapp/WEB-INF/classes">
			<fileset dir="${src}" includes="workflows/*.xml"/>
		</copy>
</target>
	
	
	<!--
	* Deploys all the apps: cms, working, preview, and live
	-->
	<target name="deploy" depends="deploy-cms,deploy-working,deploy-preview,deploy-live"/>

	<!--
	* Cleans the CMS deploy dir.
	-->
	<target name="server-clean-cms" depends="init">
		<delete dir="${deploy.dir.cms}"/>
	</target>

	<!--
	* Cleans the working deploy dir.
	-->
	<target name="server-clean-working" depends="init">
		<delete dir="${deploy.dir.working}"/>
	</target>

	<!--
	* Cleans the preview deploy dir.
	-->
	<target name="server-clean-preview" depends="init">
		<delete dir="${deploy.dir.preview}"/>
	</target>

	<!--
	* Cleans the live deploy dir.
	-->
	<target name="server-clean-live" depends="init">
		<delete dir="${deploy.dir.live}"/>
	</target>

	<!--
	* Cleans all the deploy directories
	-->
	<target name="server-clean"
			depends="server-clean-cms,server-clean-working,server-clean-preview,server-clean-live"/>

	<!--
	* Deploys after a complete rebuild
	-->
	<target name="clean-deploy" depends="clean,deploy"/>

	<!--
	* Generates API documentation; includes test code as well.
	-->
	<target name="javadoc" depends="compile" >
		<javadoc destdir="${javadoc}" packagenames="org.*" author="true" version="true"
					windowtitle="${project.fullname} API - ${project.version}"
					doctitle="${project.fullname} - ${project.version}"
					bottom="Copyright &#169; ${year} InfoGlue.org All Rights Reserved.">
			<sourcepath refid="build.sourcepath"/>
			<sourcepath refid="test.sourcepath"/>
			<classpath refid="build.classpath"/>
			<classpath refid="test.classpath"/>
		</javadoc>
	</target>

	<!--
	* Runs all the tests.  Requires junit.jar to be in the Ant lib
	* directory, otherwise the JUnit task will not be able to find the
	* JUnit classes.
	-->
	<target name="all-tests" depends="compile">
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
		<junit printsummary="yes" haltonfailure="yes" haltonerror="yes" fork="yes">
			<classpath refid="test.classpath"/>
			<sysproperty key="webapp.dir" value="${basedir}/${webapp}"/>
			<formatter type="plain"/>
			<batchtest>
				<fileset dir="${test.java}">
					<exclude name="**/Abstract*.java"/>
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--
	* Runs a particular test using the text test runner.  Requires
	* junit.jar to be in the Ant lib directory, otherwise the JUnit task
	* will not be able to find the JUnit classes.
	-->
	<target name="test" depends="compile">
		<fail unless="test.class">Property test.class was not set. Usage: ant -Dtest.class=package.to.some.TestClass test</fail>
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
		<junit printsummary="yes" haltonfailure="yes" haltonerror="yes" fork="yes">
			<classpath refid="test.classpath"/>
			<sysproperty key="webapp.dir" value="${basedir}/${webapp}"/>
			<formatter type="plain"/>
			<test name="${test.class}"/>
		</junit>
	</target>

	<!--
	* Runs a particular test using the Swing test runner.  Requires
	* junit.jar to be in the Ant lib directory, otherwise the JUnit task
	* will not be able to find the JUnit classes.
	-->
	<target name="test-swing" depends="compile">
		<fail unless="test.class">Property test.class was not set. Usage: ant -Dtest.class=fully.qualified.ClassName</fail>
		<java classname="junit.swingui.TestRunner" classpathref="test.classpath" fork="true">
			<jvmarg line="-enableassertions"/>
			<sysproperty key="webapp.dir" value="${deploy.dir.cms}"/>
			<arg line="-c ${test.class}"/>
		</java>
	</target>
</project>
