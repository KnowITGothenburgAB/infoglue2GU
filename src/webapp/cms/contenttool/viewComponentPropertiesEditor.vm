<?xml version="1.0" encoding="UTF-8"?> 
 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
	<title>Component Properties Editor</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<link rel="stylesheet" type="text/css" href="css/cms.css" /> 
	<link rel="stylesheet" type="text/css" href="css/infogluecommons.css" /> 
	<script type="text/javascript" src="script/vector.js"></script>
	<script type="text/javascript" src="script/componentPropertyDefinition.js"></script>
	<script type="text/javascript" src="script/infogluecommons.js"></script>
	
	<script language="JavaScript"> 
		window.resizeTo(800,600);
	</script> 
		
	<script type="text/javascript" language="JavaScript">
	<!--	
		var itemIndex;	
			
		/**
		 * This method creates a XML from the list of properties.
		 */
 		
		function createXML()
		{
		
			propertiesXML = "<?xml version='1.0' encoding='UTF-8'?>";
			propertiesXML += "<properties>";
			
			for (var i=0; i<propertyVector.getSize(); i++)
			{
				var property = propertyVector.getElementAt(i);
				
				propertyName 	= property.getName();
				propertyType   	= property.getType();
				propertyEntity 	= property.getEntity();
				propertyMultiple= property.getMultiple();
				propertyDescription= property.getDescription();
				propertyAllowedContentTypeNames = property.getAllowedContentTypeNames();
				propertiesXML += "<property name='" + propertyName + "' type='" + propertyType + "' entity='" + propertyEntity + "' multiple='" + propertyMultiple + "' allowedContentTypeDefinitionNames='" + propertyAllowedContentTypeNames + "' description='" + propertyDescription + "'/>";
			}
		   	
		   	propertiesXML += "</properties>";

			return propertiesXML;
		}
		
		/**
		 * This submits the component properties XML.
		 */
		 
		function submitPropertiesXML()
		{
		   	propertiesXML = createXML();
			document.inputForm.propertiesXML.value = propertiesXML;
		    showDiv("savingLayer");
			//alert("propertiesXML:" + propertiesXML);
			document.inputForm.submit();
		}
	
	  
	  	/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addTextLink(parent, address, text)
		{
			var link = document.createElement("a");
			link.setAttribute("href", address);
			var linkText = document.createTextNode(text);
			link.appendChild(linkText);
			parent.appendChild(link);
		}
	
	  	/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addImageLink(parent, address, src)
		{
			var link = document.createElement("a");
			link.setAttribute("href", address);
			var image = document.createElement("img");
			image.setAttribute("src", src);
			image.setAttribute("border", "0");
			link.appendChild(image);
			parent.appendChild(link);

			var separator = document.createElement("img");
			separator.setAttribute("src", "images/trans.gif");
			separator.setAttribute("border", "0");
			separator.setAttribute("width", "5");
			separator.setAttribute("height", "1");
			parent.appendChild(separator);
		}
		
		function showProperties(index)
		{
			itemIndex = index;
			
			componentPropertyDefinitionDiv = document.getElementById("componentPropertyDefinition");

			var componentPropertyDefinition = propertyVector.getElementAt(index);

			document.componentPropertyDefinitionForm.componentPropertyDefinition_name.value = componentPropertyDefinition.name;
			
			if(componentPropertyDefinition.type == "binding")
				document.componentPropertyDefinitionForm.componentPropertyDefinition_type.options[0].selected = 1;
			else if(componentPropertyDefinition.type == "textfield")
				document.componentPropertyDefinitionForm.componentPropertyDefinition_type.options[1].selected = 1;
			else if(componentPropertyDefinition.type == "textarea")
				document.componentPropertyDefinitionForm.componentPropertyDefinition_type.options[2].selected = 1;
			else
				document.componentPropertyDefinitionForm.componentPropertyDefinition_type.options[3].selected = 1;

			if(componentPropertyDefinition.entity == "Content")
				document.componentPropertyDefinitionForm.componentPropertyDefinition_entity.options[0].selected = 1;
			else
				document.componentPropertyDefinitionForm.componentPropertyDefinition_entity.options[1].selected = 1;
			
			if(componentPropertyDefinition.multiple == "false")
				document.componentPropertyDefinitionForm.componentPropertyDefinition_multiple.options[0].selected = 1;
			else
				document.componentPropertyDefinitionForm.componentPropertyDefinition_multiple.options[1].selected = 1;

			document.componentPropertyDefinitionForm.componentPropertyDefinition_description.value = componentPropertyDefinition.description;
			
			var allowedContentTypeNamesArray = componentPropertyDefinition.getAllowedContentTypeNames().split(",");
			var selObject = document.componentPropertyDefinitionForm.componentPropertyDefinition_allowedContentTypeNames;

			var length = selObject.options.length;
			for(i=0; i<length; i++)
			{
				isAllowed = false;
				for(j=0; j<allowedContentTypeNamesArray.length; j++)
				{
					if(allowedContentTypeNamesArray[j] == selObject.options[i].value)
					{
						//alert("" + allowedContentTypeNamesArray[j] + " == " + selObject.options[i].value);
						isAllowed = true;
					}
				}
				
				if (isAllowed) 
				{
					selObject.options[i].selected = "true";
				}
				else
				{
					selObject.options[i].selected = null;
				}
			}
			
			validateTypeChoice();
			
			componentPropertyDefinitionDiv.style.visibility = 'visible';
		}

		function hideProperties()
		{
			document.getElementById("componentPropertyDefinition").style.visibility = 'hidden';
			drawList();
		}
		
		function updateProperties()
		{
			//alert("Updating property");
			componentPropertyDefinitionDiv = document.getElementById("componentPropertyDefinition");

			var componentPropertyDefinition = propertyVector.getElementAt(itemIndex);
			//alert("componentPropertyDefinition:" + componentPropertyDefinition.getName());

			componentPropertyDefinition.setName(document.getElementById("componentPropertyDefinition_name").value);
			componentPropertyDefinition.setDescription(document.getElementById("componentPropertyDefinition_description").value);
			componentPropertyDefinition.setType(document.getElementById("componentPropertyDefinition_type").value);
			if(componentPropertyDefinition.getType() == "binding")
			{
				componentPropertyDefinition.setEntity(document.getElementById("componentPropertyDefinition_entity").value);
				componentPropertyDefinition.setMultiple(document.getElementById("componentPropertyDefinition_multiple").value);
				
				var selObject = document.getElementById("componentPropertyDefinition_allowedContentTypeNames");
				var length = selObject.options.length;
				var allowedContentTypeNames = "";
				for(i=0; i<length; i++)
				{
					if (selObject.options[i].selected) 
					{
				      	if(allowedContentTypeNames != "")
							allowedContentTypeNames += ",";
							
						allowedContentTypeNames = allowedContentTypeNames + selObject.options[i].value;
					}
				}
			
				componentPropertyDefinition.setAllowedContentTypeNames(allowedContentTypeNames);
			}		
			else
			{
				componentPropertyDefinition.setEntity("");
				componentPropertyDefinition.setMultiple("");
				componentPropertyDefinition.setAllowedContentTypeNames("");
			}
			
			hideProperties();
		}

		function showAccessRights(extraParameters)
		{
			document.location.href = "ViewAccessRights.action?interceptionPointCategory=ComponentPropertyEditor&extraParameters=" + extraParameters + "&colorScheme=StructureTool&returnAddress=$formatter.encodeURI($this.currentURL, 'UTF-8')";
		}

		/**
		 * This method draws the list of properties.
		 */
		 
		function drawList()
		{
			//alert("Drawing list...:" + propertyVector.getSize());
			var table = document.getElementById("properties")
			var parent = table.parentNode;
			parent.removeChild(table);

			mytable = document.createElement("TABLE");
			mytable.setAttribute("id", "properties");
			mytable.setAttribute("border", "0");
			mytable.setAttribute("width", "100%");
			mytable.setAttribute("cellpadding", "2");
			mytable.setAttribute("cellspacing", "0");
	        mytablebody = document.createElement("TBODY");
	        for (var i=0; i<propertyVector.getSize(); i++)
			{
				var componentPropertyDefinition = propertyVector.getElementAt(i);
				//alert("Element:" + componentPropertyDefinition.getName());
				var myTR = document.createElement("TR");
				var actionTD = document.createElement("TD");
				actionTD.setAttribute("width", "50");
				actionTD.setAttribute("valign", "top");
				addImageLink(actionTD, "javascript:movePropertyDown(" + i + ");", "images/downArrow.gif");
				addImageLink(actionTD, "javascript:movePropertyUp(" + i + ");", "images/upArrow.gif");
				addImageLink(actionTD, "javascript:deleteProperty(" + i + ");", "images/delete.gif");
				myTR.appendChild(actionTD);
				
				addTD(myTR, componentPropertyDefinition.name)
				addTD(myTR, componentPropertyDefinition.type)
				addTD(myTR, componentPropertyDefinition.entity)
				addTD(myTR, componentPropertyDefinition.multiple)
				addTD(myTR, componentPropertyDefinition.allowedContentTypeNames)
				addTD(myTR, componentPropertyDefinition.description)

				var actionTD = document.createElement("TD");
				addImageLink(actionTD, "javascript:showProperties(" + i + ");", "images/properties.gif");
				addImageLink(actionTD, "javascript:showAccessRights('${contentId}_" + componentPropertyDefinition.name + "');", "images/accessRights.gif");
				myTR.appendChild(actionTD);

				mytablebody.appendChild(myTR);
			}
			 
	        mytable.appendChild(mytablebody);
	        parent.appendChild(mytable);
		}

		function addTD(tr, text)
		{
			var propertyTD = document.createElement("TD");
			propertyTD.setAttribute("align", "left");
			propertyTD.setAttribute("valign", "top");
			var propertyText = document.createTextNode(text);
			propertyTD.appendChild(propertyText);
			tr.appendChild(propertyTD);
		}


		/**
		 * This method removes a property from the vector.
		 */
		 
		function deleteProperty(index)
		{
			propertyVector.removeElementAt(index);
			drawList();
		}
		
		/**
		 * This method adds a property to the vector.
		 */

		function addProperty()
		{
			property = new ComponentPropertyDefinition("NewProperty", "binding", "Content", "false", "", "No description yet");
			propertyVector.addElement(property);
				
			drawList();
		}
		
		/**
		 * This method moves a qualifyer 1 step up in the vector.
		 */
		 
		function movePropertyUp(index)
		{
			if(index > 0)
			{
				var property 			= propertyVector.getElementAt(index);
				var previousProperty 	= propertyVector.getElementAt(index - 1);
				
				name 		= property.getName();
				type		= property.getType();
				entity		= property.getEntity();
				multiple 	= property.getMultiple();
				allowedContentTypeNames = property.getAllowedContentTypeNames();
				description = property.getDescription();
				
				property.setName(previousProperty.getName());
				property.setType(previousProperty.getType());
				property.setEntity(previousProperty.getEntity());
				property.setMultiple(previousProperty.getMultiple());
				property.setAllowedContentTypeNames(previousProperty.getAllowedContentTypeNames());
				property.setDescription(previousProperty.getDescription());
				
				previousProperty.setName(name)
				previousProperty.setType(type)
				previousProperty.setEntity(entity)
				previousProperty.setMultiple(multiple)
				previousProperty.setAllowedContentTypeNames(allowedContentTypeNames);
				previousProperty.setDescription(description);
				
				drawList();
			}			
		}

		/**
		 * This method moves a qualifyer 1 step up in the vector.
		 */
		 
		function movePropertyDown(index)
		{
			if(index < propertyVector.getSize() - 1)
			{
				var property 			= propertyVector.getElementAt(index);
				var previousProperty 	= propertyVector.getElementAt(index + 1);
				
				name 		= property.getName();
				type		= property.getType();
				entity		= property.getEntity();
				multiple 	= property.getMultiple();
				allowedContentTypeNames = property.getAllowedContentTypeNames();
				description = property.getDescription();
				
				property.setName(previousProperty.getName())
				property.setType(previousProperty.getType())
				property.setEntity(previousProperty.getEntity())
				property.setMultiple(previousProperty.getMultiple())
				property.setAllowedContentTypeNames(previousProperty.getAllowedContentTypeNames());
				property.setDescription(previousProperty.getDescription());
				
				previousProperty.setName(name)
				previousProperty.setType(type)
				previousProperty.setEntity(entity)
				previousProperty.setMultiple(multiple)
				previousProperty.setAllowedContentTypeNames(allowedContentTypeNames);
				previousProperty.setDescription(description);
			
				drawList();
			}
		}
		
		function validateTypeChoice()
		{
			selectBox = document.componentPropertyDefinitionForm.componentPropertyDefinition_type;
			if(selectBox.value == "textfield" || selectBox.value == "textarea" || selectBox.value == "selectfield")
			{
				document.getElementById("entityParagraph").style.display = "none";
				document.getElementById("multipleParagraph").style.display = "none";
				document.getElementById("allowedContentTypeNamesParagraph").style.display = "none";
			}
			else
			{
				document.getElementById("entityParagraph").style.display = "block";
				document.getElementById("multipleParagraph").style.display = "block";
				document.getElementById("allowedContentTypeNamesParagraph").style.display = "block";
			}
		}
		
		
		/**
		 * This function initializes the vector of previous properties.
		 */
		 
		function init()
		{
			#foreach($propertyDefinition in $componentPropertyDefinitions)
				//alert("$propertyDefinition");
				
				property = new ComponentPropertyDefinition("$propertyDefinition.name", "$propertyDefinition.type", "$propertyDefinition.entity", "$propertyDefinition.multiple", "$propertyDefinition.allowedContentTypeNames", "$propertyDefinition.description");
				propertyVector.addElement(property);
			#end
	
			//alert("propertyVector" + propertyVector.getSize());
			drawList();		
		}
		
		var propertyVector = new Vector(0);
	
	
		
	
	</script>
	
</head>

<body class="contenttooledit" onload="javascript:init();">

<div id="savingLayer" class="infobackground">
	<div class="infoheader">Saving changes</div>
	<div class="infobody">Processing input - please wait!</div>
</div>


<div id="componentPropertyDefinition" class="smallPropDiv" style="border-style:solid; border-width:1px; background-color: white; LEFT:150px; position:absolute; TOP:150px; visibility:hidden; z-index:1">
<div id="componentPropertyDefinitionHandle" class="smallPropDivHandle">
	Edit component property
</div>
<div id="componentPropertyDefinitionBody" class="smallPropDivBody">	

<form name="componentPropertyDefinitionForm">
<p>
	<b>Name:</b>
	<input type="textfield" name="componentPropertyDefinition_name" id="componentPropertyDefinition_name" value=""/>
</p>
<p>
	<b>Description:</b>
	<input type="textfield" name="componentPropertyDefinition_description" id="componentPropertyDefinition_description" value=""/>
</p>
<p>
	<b>Property type:</b>
	<select size="1" name="componentPropertyDefinition_type" id="componentPropertyDefinition_type" class="sitedropbox" onchange="validateTypeChoice();">
		<option value="binding">binding</option>
		<option value="textfield">textfield</option>
		<option value="textarea">textarea</option>
		<option value="selectfield">selectfield</option>
	</select>
</p>
<p id="entityParagraph" style="display: block;">
	<b>Entity:</b>
	<select size="1" name="componentPropertyDefinition_entity" id="componentPropertyDefinition_entity" class="sitedropbox">
	    <option value="Content">Content</option>
	    <option value="SiteNode">SiteNode</option>
	</select>
</p>
<p id="multipleParagraph" style="display: block;">
	<b>Multiple:</b>
	<select size="1" name="componentPropertyDefinition_multiple" id="componentPropertyDefinition_multiple" class="sitedropbox">
	    <option value="false">No</option>
	    <option value="true">Yes</option>
	</select>
</p>
<p id="allowedContentTypeNamesParagraph" style="display: block;">
	<b>Allowed content type(s):</b>
	<select name="componentPropertyDefinition_allowedContentTypeNames" id="componentPropertyDefinition_allowedContentTypeNames" class="sitedropbox" multiple="true" size="5">
	    <option value="">Select 0..n</option>
	    #foreach($contentTypeDefinition in $contentTypeDefinitions)
	    <option value="$contentTypeDefinition.name">$contentTypeDefinition.name</option>
	    #end
 	</select>
</p>
<p>
	<a href="javascript:updateProperties();"><img src="$ui.getString("images.managementtool.buttons.saveAndExit")" width="80" height="25" border="0"></a>
	<a href="javascript:hideDiv('componentPropertyDefinition');"><img src="$ui.getString("images.managementtool.buttons.cancel")" width="50" height="25" border="0"></a>
</p>
</form>
</div>
</div>

<table class="contenttooledit" cellpadding="0" cellspacing="0" border="0" width="100%">
<tr>
	<td valign="top">
		
		<table cellpadding="0" cellspacing="0" border="0" width="100%">
		<tr class="darkgreen">
			<td class="smalllabel">Component Properties</td>
		</tr>
		<tr>
			<td bgcolor="#EEF7DC" colspan="4" height="1"><img src="images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td bgcolor="#C7D1B3" colspan="4" height="1"><img src="images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td height="1"><img src="images/trans.gif" width="1" height="5"></td>
		</tr>		
		<tr>
			<td height="1"><img src="images/trans.gif" width="1" height="5"></td>
		</tr>		
		
		<tr>
			<td>
			  	<TABLE id="properties" border="1">
			  	
			  	</table>
			</td>
		</tr>
				
		<tr>
			<td height="1"><img src="images/trans.gif" width="1" height="5"></td>
		</tr>		
		<tr>
			<td>
				<a href="javascript:addProperty();">Add new property</a>
			</td>
		</tr>
		<tr>
			<td height="1"><img src="images/trans.gif" width="1" height="10"></td>
		</tr>		
		
		<tr>
			<td>
				<a href="javascript:submitPropertiesXML();"><img src="$ui.getString("images.contenttool.buttons.saveAndExit")" border="0"></a>
				<a href="javascript:window.opener.location.reload();window.close();"><img src="$ui.getString("images.contenttool.buttons.cancel")" width="50" height="25" border="0"></a>
			</td>
		</tr>		
		
		</table>
		
		<form id="inputForm" name="inputForm" action="ViewComponentPropertiesEditor!update.action" method="POST">
			<input type="hidden" name="contentVersionId" value="$contentVersionId">
			<input type="hidden" name="attributeName" value="$attributeName">
			<input type="hidden" name="propertiesXML" value="">
		</form>

	</td>
</tr>
</table>

</body>
</html>
